#!/usr/bin/env python
# -*- coding: utf-8 -*-

import unittest

from bitvec import Byte, Word
from memory import Memory, ProgramMemory, DataMemory

# Para hacer doctest:
# https://docs.python.org/2.7/library/unittest.html

class TestMemory(unittest.TestCase):

#####################################################################
# ProgramMemory
#####################################################################
    # trace
    def test_ProgramMemory_trace_init(self):
        memory = ProgramMemory()
        self.assertEqual(memory._trace, False)
    def test_ProgramMemory_trace_on(self):
        memory = ProgramMemory()
        memory.trace_on()
        self.assertEqual(memory._trace, True)
    def test_ProgramMemory_trace_off(self):
        memory = ProgramMemory()
        memory.trace_on()
        memory.trace_off()
        self.assertEqual(memory._trace, False)
        
    #__len__
    def test_ProgramMemory_len(self):
        memory = ProgramMemory()
        self.assertEqual(len(memory), 1024)

    # __repr__

    # dump
    def test_ProgramMemory_dump(self):
        word = Word(456)
        memory = ProgramMemory()
        memory._m[300] = word
        memory._m[301] = word
        memory._m[304] = word
        self.assertEqual(memory.dump(300, 301), "0X12C: 01C8\n")

    # __getitem__
    def test_ProgramMemory_getitem(self):
        word = Word()
        memory = ProgramMemory()
        memory._m[20] = word
        self.assertEqual(memory[560], word)
    
    # __setitem__
    def test_ProgramMemory_setitem(self):
        word = Word()
        memory = ProgramMemory()
        memory._m[560] = word
        self.assertEqual(memory[560], word)


#####################################################################
# DataMemory
#####################################################################
    # trace
    def test_DataMemory_trace_init(self):
        memory = DataMemory()
        self.assertEqual(memory._trace, False)
    def test_DataMemory_trace_on(self):
        memory = DataMemory()
        memory.trace_on()
        self.assertEqual(memory._trace, True)
    def test_DataMemory_trace_off(self):
        memory = DataMemory()
        memory.trace_on()
        memory.trace_off()
        self.assertEqual(memory._trace, False)
        
    #__len__
    def test_DataMemory_len(self):
        memory = DataMemory()
        self.assertEqual(len(memory), 1024)

    # __repr__

    # dump
    def test_DataMemory_dump(self):
        word = Word(456)
        memory = DataMemory()
        memory._m[300] = word
        memory._m[301] = word
        memory._m[304] = word
        self.assertEqual(memory.dump(300, 301), "0X12C: 01C8\n")

    # __getitem__
    def test_DataMemory_getitem(self):
        word = Word()
        memory = DataMemory()
        memory._m[20] = word
        self.assertEqual(memory[560], word)
    
    # __setitem__
    def test_DataMemory_setitem(self):
        word = Word()
        memory = DataMemory()
        memory._m[560] = word
        self.assertEqual(memory[560], word)
    


if __name__ == '__main__':
    unittest.main()
