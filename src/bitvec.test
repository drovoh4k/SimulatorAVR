#!/usr/bin/env python
# -*- coding: utf-8 -*-

import unittest
from bitvec import BitVector, Byte, Word

# Para hacer doctest:
# https://docs.python.org/2.7/library/unittest.html

class TestBitVector(unittest.TestCase):

#####################################################################
# BitVector
#####################################################################
    # extract_field_u
    def test_BitVector_extract_field_u_less_8_bits(self):
        vector = Byte(0b00110010) # 0011 0010
        self.assertEqual(vector.extract_field_u('111111'), '0b00110010')
    def test_extract_field_u_more_8_bits(self):
        vector = Word(3172) # 0000110001100100
        self.assertEqual(vector.extract_field_u('1111110000000000'), '0b0000110000000000')

    # extract_field_s
    def test_BitVector_extract_field_s_less_8_bits(self):
        vector = Byte(0b00110010) # 0011 0010
        self.assertEqual(vector.extract_field_s('111111'), None)
    
    # __int__ 
    def test_BitVector_int_less_8_bits(self):
         vector = Byte(0b00110000) # 0011 0000
         self.assertEqual(int(vector), 48)
    def test_BitVector_int_8_bits(self):
        vector = Byte(0b10111110) # 1011 1110
        self.assertEqual(int(vector), 190)
    def test_BitVector_int_more_8__bits_less_16_bits(self):
        vector = Word(0b0000011011001110) # 0000 0110 1100 1110
    def test_BitVector_int_16_bits(self):
        vector = Word(0b1001011011001110) # 1001 0110 1100 1110
        self.assertEqual(int(vector), 38606)
    
    # __index__
    def test_BitVector_index_less_8_bits(self):
         vector = Byte(0b00110000) # 0011 0000
         self.assertEqual(int(vector), 48)
    def test_BitVector_index_8_bits(self):
        vector = Byte(0b10111110) # 1011 1110
        self.assertEqual(int(vector), 190)
    def test_BitVector_index_more_8__bits_less_16_bits(self):
        vector = Word(0b0000011011001110) # 0000 0110 1100 1110
    def test_BitVector_index_16_bits(self):
        vector = Word(0b1001011011001110) # 1001 0110 1100 1110
        self.assertEqual(int(vector), 38606)

    # __repr__
    def test_BitVector_repr_byte(self):
        vector = Byte(0b00001100) # 0000 1100
        self.assertEqual(str(vector), '0C')
    def test_BitVector_repr_word(self):
        vector = Word(0b0000000011101001) # 0000 0000 1110 1001
        self.assertEqual(str(vector), '0E9')

    ##### Add test #####
    
    # __add__
    def test_BitVector_add_byte_byte(self):
        vector_1 = Byte(18)
        vector_2 = Byte(126)
        result = vector_1 + vector_2
        self.assertEqual(result._w, 144)
    def test_BitVector_add_byte_word(self):
        vector_1 = Byte(18)
        vector_2 = Word(126)
        result = vector_1 + vector_2
        self.assertEqual(result._w, 144)
    def test_BitVector_add_byte_integrer(self):
        vector_1 = Byte(18)
        vector_2 = 126
        result = vector_1 + vector_2
        self.assertEqual(result._w, 144)
    def test_BitVector_add_word_word(self):
        vector_1 = Word(18)
        vector_2 = Word(126)
        result = vector_1 + vector_2
        self.assertEqual(result._w, 144)
    def test_BitVector_add_word_byte(self):
        vector_1 = Word(18)
        vector_2 = Byte(126)
        result = vector_1 + vector_2
        self.assertEqual(result._w, 144)
    def test_BitVector_add_word_integrer(self):
        vector_1 = Word(18)
        vector_2 = 126
        result = vector_1 + vector_2
        self.assertEqual(result._w, 144)

    # __sub__
    def test_BitVector_sub_byte_byte(self):
        vector_1 = Byte(126)
        vector_2 = Byte(18)
        result = vector_1 - vector_2
        self.assertEqual(result._w, 108)
    def test_BitVector_sub_byte_word(self):
        vector_1 = Byte(126)
        vector_2 = Word(18)
        result = vector_1 - vector_2
        self.assertEqual(result._w, 108)
    def test_BitVector_sub_byte_integrer(self):
        vector_1 = Byte(126)
        vector_2 = 18
        result = vector_1 - vector_2
        self.assertEqual(result._w, 108)
    def test_BitVector_sub_word_word(self):
        vector_1 = Word(126)
        vector_2 = Word(18)
        result = vector_1 - vector_2
        self.assertEqual(result._w, 108)
    def test_BitVector_sub_word_byte(self):
        vector_1 = Word(126)
        vector_2 = Byte(18)
        result = vector_1 - vector_2
        self.assertEqual(result._w, 108)
    def test_BitVector_sub_word_integrer(self):
        vector_1 = Word(126)
        vector_2 = 18
        result = vector_1 - vector_2
        self.assertEqual(result._w, 108)

    # __and__
    def test_BitVector_and_byte_byte(self):
        vector_1 = Byte(0b10111010) # 1011 1010
        vector_2 = Byte(0b00101001)  # 0010 1001
        result = vector_1 & vector_2
        self.assertEqual(result._w, 0b00101000) # 0010 1000
    def test_BitVector_and_byte_word(self):
        vector_1 = Byte(0b10111010) # 1011 1010
        vector_2 = Word(0b0000000000101001)  # 0000 0000 0010 1001
        result = vector_1 & vector_2
        self.assertEqual(result._w, 0b00101000) # 0010 1000
    def test_BitVector_and_word_word(self):
        vector_1 = Word(0b0000000010111010) # 0000 0000 1011 1010
        vector_2 = Word(0b0000000000101001) # 0000 0000 0010 1001
        result = vector_1 & vector_2
        self.assertEqual(result._w, 0b00101000) # 0010 1000
    def test_BitVector_and_word_byte(self):
        vector_1 = Word(0b0000000010111010) # 0000 0000 1011 1010
        vector_2 = Byte(0b00101001)  # 0010 1001
        result = vector_1 & vector_2
        self.assertEqual(result._w, 0b00101000) # 0010 1000

    # __or__
    def test_BitVector_or_byte_byte(self):
        vector_1 = Byte(0b10111010) # 1011 1010
        vector_2 = Byte(0b00101001)  #  0010 1001
        result = vector_1 | vector_2
        self.assertEqual(result._w, 0b10111011) # 1011 1011
    def test_BitVector_or_byte_word(self):
        vector_1 = Byte(0b10111010) # 1011 1010
        vector_2 = Word(0b0000000000101001)  # 0000 0000 0010 1001
        result = vector_1 | vector_2
        self.assertEqual(result._w, 0b10111011) # 1011 1011
    def test_BitVector_or_word_word(self):
        vector_1 = Word(0b0000000010111010) # 0000 0000 1011 1010
        vector_2 = Word(0b0000000000101001)  # 0000 0000 0010 1001
        result = vector_1 | vector_2
        self.assertEqual(result._w, 0b10111011) # 1011 1011
    def test_BitVector_or_word_byte(self):
        vector_1 = Word(0b0000000010111010) # 0000 0000 1011 1010
        vector_2 = Byte(0b00101001) # 0010 1001
        result = vector_1 | vector_2
        self.assertEqual(result._w, 0b10111011) # 1011 1011

    # __xor__
    def test_BitVector_xor_byte_byte(self):
        vector_1 = Byte(0b10111010) # 1011 1010
        vector_2 = Byte(0b00101001)  # 0010 1001
        result = vector_1 ^ vector_2
        self.assertEqual(result._w, 0b10010011) # 1001 0011
    def test_BitVector_xor_byte_word(self):
        vector_1 = Byte(0b10111010) # 1011 1010
        vector_2 = Word(0b0000000000101001)  # 0000 0000 0010 1001
        result = vector_1 ^ vector_2
        self.assertEqual(result._w, 0b0000000010010011) # 0000 0000 1001 0011
    def test_BitVector_xor_word_word(self):
        vector_1 = Word(0b0000000010111010) # 0000 0000 1011 1010
        vector_2 = Word(0b0000000000101001)  # 0000 0000 0010 1001
        result = vector_1 ^ vector_2 
        self.assertEqual(result._w, 0b0000000010010011) # 0000 0000 1001 0011
    def test_BitVector_xor_word_byte(self):
        vector_1 = Word(0b0000000010111010) # 0000 0000 1011 1010
        vector_2 = Byte(0b00101001)  # 0010 1001
        result = vector_1 ^ vector_2
        self.assertEqual(result._w, 0b0000000010010011) # 0000 0000 1001 0011

    # __invert__
    def test_BitVector_invert_byte(self):
        vector = Byte(0b10111010) # 1011 1010
        result = ~vector
        self.assertEqual(result._w, 0b01000101) # 0100 0101
    def test_BitVector_invert_word(self):
        vector = Word(0b0000000010111010) # 0000 0000 1011 1010
        result = ~vector
        self.assertEqual(result._w, 69) # 0000 0000 0100 0101

    # __lshift__
    def test_BitVector_lshift_byte(self):
        vector = Byte(0b11100100) # 1110 0100
        result = vector << 2
        self.assertEqual(result._w, 0b10010011) # 1001 0011
    def test_BitVector_lshift_word(self):
        vector = Word(0b0000000011100101) # 0000 0000 1110 0101
        result = vector << 2
        self.assertEqual(result._w, 0b0000001110010100) # 0000 0011 1001 0100

    # __rshift__
    def test_BitVector_rshift_byte(self):
        vector = Byte(0b11100100) # 1110 0100
        result = vector >> 2
        self.assertEqual(result._w, 0b00111001) # 0011 1001
    def test_BitVector_rshift_word(self):
        vector = Word(0b0000000011100101) # 0000 0000 1110 0101
        result = vector >> 2
        self.assertEqual(result._w, 0b0100000000111001) # 0100 0000 0011 1001

    # __getitem__
    def test_BitVector_getitem_byte_1(self):
        vector = Byte(0b10110011) # 1011 0011
        result = vector[3]
        self.assertEqual(result, True)
    def test_getitem_byte_2(self):
        vector = Byte(0b00000011) # 0000 0011
        result = vector[3]
        self.assertEqual(result, False)
    def test_BitVector_getitem_word_1(self):
        vector = Word(0b0000000001011001) # 0000 0000 0101 1001
        result = vector[9]
        self.assertEqual(result, True)
    def test_BitVector_getitem_word_2(self):
        vector = Word(0b0000000001011001) # 0000 0000 0101 1001
        result = vector[4]
        self.assertEqual(result, False)

    # __setitem__
    def test_BitVector_setitem_byte(self):
        vector = Byte(0b10110011) # 1011 0011
        vector[3] = 0
        self.assertEqual(bin(vector), False)
    def test_BitVector_setitem_word(self):
        vector = Word(0b0000000010110011) # 0000 0000 1011 0011
        vector[4] = 1
        self.assertEqual(vector[4], True)

#####################################################################
# Byte
#####################################################################
    def test_BitVector_len_byte(self):
        vector = Byte(197) # 1100 0101
        self.assertEqual(len(vector), 8)

    def test_BitVector_concat(self):
        vector_1 = Byte(4)
        vector_2 = Byte(3)
        result = vector_1.__concat__(vector_2)
        self.assertEqual(int(result), 1027)

#####################################################################
# Word
#####################################################################
    # __len__
    def test_BitVector_len_word(self):
        vector = Word(0b1100010110011010) # 1100 0101 1001 1010
        self.assertEqual(len(vector), 16)

    # __lsb__
    def test_BitVector_lsb_word_1(self):
        vector = Word(0b0000000000001100) # 0000 0000 0000 1100
        result = vector.lsb()
        self.assertEqual(int(result), 0b00001100) # 0000 1100
    def test_BitVector_lsb_word_2(self):
        vector = Word(0b1100010110011010) # 1100 0101 1001 1010
        result = vector.lsb()
        self.assertEqual(int(result), 0b10011010) # 1001 1010
    def test_BitVector_lsb_word_3(self):
        vector = Word(0b0000000000001000) # 0000 0000 0000 1000
        result = vector.lsb()
        self.assertEqual(int(result), 0b00001000) # 0000 1000
        
    # __msb__
    def test_BitVector_msb_word_1(self):
        vector = Word(0b1000000000000000) # 1000 0000 0000 0000
        result = vector.msb()
        self.assertEqual(int(result), 0b10000000) # 1000 0000
    def test_BitVector_msb_word_2(self):
        vector = Word(0b0000000000000100) # 0000 0000 0000 0100
        result = vector.msb()
        self.assertEqual(int(result), 0) # 0000 0000
        
if __name__ == '__main__':
    unittest.main()

